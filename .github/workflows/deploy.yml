name: EC2에 Docker 배포하기

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.properties 파일 생성
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: 테스트 및 빌드 실행
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t ${{ secrets.AWS_CONTAINER_NAME }} .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag ${{ secrets.AWS_CONTAINER_NAME }} ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_CONTAINER_NAME }}:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_CONTAINER_NAME }}:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # 기존 컨테이너 중지 및 삭제
            docker stop ${{ secrets.DOCKER_CONTAINER_NAME }} || true
            docker rm ${{ secrets.DOCKER_CONTAINER_NAME }} || true

            # Docker 이미지 Pull (ECR에서 푸시한 이미지를 Pull)
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_CONTAINER_NAME }}:latest

            # 새로운 Docker 컨테이너 실행 (포트 충돌 방지)
            docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }}-$(date +%s) -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_CONTAINER_NAME }}:latest
